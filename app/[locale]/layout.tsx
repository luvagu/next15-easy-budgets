// import { type Metadata } from 'next'
import { ClerkProvider } from '@clerk/nextjs'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'
import { hasLocale, NextIntlClientProvider } from 'next-intl'
import { getTranslations } from 'next-intl/server'
import { routing } from '@/i18n/routing'
import { notFound } from 'next/navigation'
import { Toaster } from '@/components/ui/sonner'

const geistSans = Geist({
	variable: '--font-geist-sans',
	subsets: ['latin'],
})

const geistMono = Geist_Mono({
	variable: '--font-geist-mono',
	subsets: ['latin'],
})

// static metadata
// export const metadata: Metadata = {
// 	title: 'Clerk Next.js Quickstart',
// 	description: 'Generated by create next app',
// }

// dynamic metadata
export async function generateMetadata() {
	const t = await getTranslations('metadata')

	return {
		title: t('meta_home_title'),
		description: t('meta_description'),
	}
}

export function generateStaticParams() {
	return routing.locales.map(locale => ({ locale }))
}

export default async function RootLayout({
	children,
	params,
}: LayoutProps<'/[locale]'>) {
	// Ensure that the incoming `locale` is valid
	const { locale } = await params

	if (!hasLocale(routing.locales, locale)) {
		notFound()
	}

	return (
		<ClerkProvider>
			<html lang={locale}>
				<body
					className={`${geistSans.variable} ${geistMono.variable} antialiased font-sans bg-background`}
				>
					<NextIntlClientProvider>{children}</NextIntlClientProvider>
					<Toaster richColors />
				</body>
			</html>
		</ClerkProvider>
	)
}
